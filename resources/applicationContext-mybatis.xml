<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    ">
	<!-- ==================================================================================== -->
	<!-- 读取数据库配置文件 -->
	<context:property-placeholder location="classpath:database.properties" />
	<!-- 获取数据源（使用dbcp连接池） -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" scope="singleton">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${user}" />
		<property name="password" value="${password}" />
		<!-- sql心跳 保证连接池中的连接是真是有效的 -->
		<!-- 开启Evict的定时校验，循环校验 -->
		<property name="testWhileIdle" value="true"></property>
		<!-- 在进行borrowObject处理时，会对拿到的 连接进行校验-false -->
		<property name="testOnBorrow" value="false"></property>
		<!-- 在进行ruturnObject处理时，会对返回的连接进行校验-false -->
		<property name="testOnReturn" value="false"></property>
		<!-- 校验使用的sql语句，validatetionQuery，复杂的校验sql会影响性能 -->
		<property name="validationQuery" value="select 1"></property>
		<!-- 配置每次校验连接的数量，一般等于maxActive -->
		<property name="numTestsPerEvictionRun" value="${maxActive}"></property>
	</bean>
	<!-- ==================================================================================== -->
	<!-- 使spring扫描包下的所有类，让标注spring注解的类生效 
        若扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean-->
	<context:component-scan base-package="service"></context:component-scan>
	<!-- ==================================================================================== -->
	<!-- 配置SQLsessionfactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 引用数据源文件 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 引用mybatis配置文件中的配置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 配置SQL映射文件信息 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:dao/**/*.xml</value>
			</list>
		</property>
	</bean>
	<!-- ==================================================================================== -->
	<!-- 使用MapperScannerConfigurer自动扫描dao包下的接口和mapper文件，生成对应的Bean实例(如果有新的dao包也直接添加进去) -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="dao"></property>
	</bean>
	<!-- ==================================================================================== -->
	<!-- 定义事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 通过《tx：advice》标签为指定的事务管理器设置事务属性 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- 定义属性，声明事务策略，包括事务传播机制和事务隔离级别 -->
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" isolation="DEFAULT"
				read-only="false" timeout="10" />
			<tx:method name="add*"  propagation="REQUIRED" read-only="false" rollback-for="Exception" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" 
                            rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	<!-- 事务增强 -->
	<aop:config> 
		<!-- 定义切入点 -->
		<aop:pointcut expression="execution(* service..*.*(..))"
			id="serviceMethod" />
		<!-- 将事务策略与切入点结合，完成事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod" />
	</aop:config>
	<!-- ==================================================================================== -->
	<!-- log环绕增强 -->
	<!-- 声明aop增强bean的实例 -->
	<bean class="aop.AroundLogger"></bean>
	<!-- 启用对与aspectJ增强注解的支持 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
</beans>